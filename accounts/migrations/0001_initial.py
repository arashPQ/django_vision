# Generated by Django 5.2.6 on 2025-09-12 14:37

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomerProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')], max_length=10, null=True)),
                ('marital_status', models.CharField(blank=True, choices=[('single', 'Single'), ('married', 'Married'), ('divorced', 'Divorced'), ('widowed', 'Widowed')], max_length=20, null=True)),
                ('occupation', models.CharField(blank=True, max_length=100, null=True)),
                ('company', models.CharField(blank=True, max_length=100, null=True)),
                ('loyalty_tier', models.CharField(choices=[('bronze', 'Bronze'), ('silver', 'Silver'), ('gold', 'Gold'), ('platinum', 'Platinum'), ('diamond', 'Diamond')], default='bronze', max_length=20)),
                ('loyalty_points', models.PositiveIntegerField(default=0)),
                ('loyalty_points_earned', models.PositiveIntegerField(default=0)),
                ('loyalty_points_spent', models.PositiveIntegerField(default=0)),
                ('joined_loyalty_date', models.DateTimeField(blank=True, null=True)),
                ('total_orders', models.PositiveIntegerField(default=0)),
                ('total_items_purchased', models.PositiveIntegerField(default=0)),
                ('average_order_value', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('last_purchase_date', models.DateTimeField(blank=True, null=True)),
                ('first_purchase_date', models.DateTimeField(blank=True, null=True)),
                ('preferred_payment_method', models.CharField(blank=True, max_length=50, null=True)),
                ('cart_abandonment_rate', models.DecimalField(decimal_places=2, default=0.0, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('return_rate', models.DecimalField(decimal_places=2, default=0.0, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('email_marketing', models.BooleanField(default=True)),
                ('sms_marketing', models.BooleanField(default=False)),
                ('personalized_recommendations', models.BooleanField(default=True)),
                ('cookie_consent', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Customer Profile',
                'verbose_name_plural': 'Customer Profiles',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('email', models.EmailField(db_index=True, max_length=254, unique=True, verbose_name='email address')),
                ('user_type', models.CharField(choices=[('customer', 'Customer'), ('seller', 'Seller'), ('admin', 'Admin'), ('vendor', 'Vendor'), ('affiliate', 'Affiliate'), ('support', 'Support Agent')], db_index=True, default='customer', max_length=10)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('phone_number', models.CharField(blank=True, max_length=17, null=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('secondary_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('profile_picture', models.ImageField(blank=True, max_length=500, null=True, upload_to='profile_pics/%Y/%m/%d/')),
                ('cover_photo', models.ImageField(blank=True, max_length=500, null=True, upload_to='cover_photos/%Y/%m/%d/')),
                ('is_verified', models.BooleanField(default=False)),
                ('verification_token', models.CharField(blank=True, max_length=100, null=True)),
                ('verification_date', models.DateTimeField(blank=True, null=True)),
                ('is_phone_verified', models.BooleanField(default=False)),
                ('is_identity_verified', models.BooleanField(default=False)),
                ('account_status', models.CharField(choices=[('active', 'Active'), ('suspended', 'Suspended'), ('banned', 'Banned'), ('pending', 'Pending Approval'), ('restricted', 'Restricted')], db_index=True, default='active', max_length=20)),
                ('status_reason', models.TextField(blank=True, null=True)),
                ('status_changed_date', models.DateTimeField(blank=True, null=True)),
                ('two_factor_enabled', models.BooleanField(default=False)),
                ('two_factor_method', models.CharField(blank=True, choices=[('sms', 'SMS'), ('email', 'Email'), ('authenticator', 'Authenticator App')], max_length=64, null=True)),
                ('last_password_change', models.DateTimeField(auto_now_add=True)),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('login_notifications', models.BooleanField(default=True)),
                ('language', models.CharField(default='en', max_length=10)),
                ('timezone', models.CharField(default='UTC', max_length=50)),
                ('currency', models.CharField(default='USD', max_length=3)),
                ('communication_preferences', models.JSONField(default=dict)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('login_count', models.PositiveIntegerField(default=0)),
                ('failed_login_attempts', models.PositiveIntegerField(default=0)),
                ('locked_until', models.DateTimeField(blank=True, null=True)),
                ('credit_balance', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('total_spent', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to='accounts.user')),
                ('groups', models.ManyToManyField(blank=True, help_text='The Groups this user belongs to.', related_name='custom_user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to='accounts.user')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for the user.', related_name='custom_user_permissions_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'permissions': [('can_impersonate', 'Can impersonate other users'), ('can_export_users', 'Can export user data'), ('can_bulk_edit_users', 'Can bulk edit users')],
            },
        ),
        migrations.CreateModel(
            name='SellerProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('business_name', models.CharField(max_length=255, unique=True)),
                ('business_slug', models.SlugField(max_length=255, unique=True)),
                ('business_type', models.CharField(choices=[('individual', 'Individual'), ('sole_proprietorship', 'Sole Proprietorship'), ('partnership', 'Partnership'), ('corporation', 'Corporation'), ('llc', 'Limited Liability Company')], max_length=20)),
                ('business_description', models.TextField()),
                ('business_logo', models.ImageField(blank=True, null=True, upload_to='seller_logos/%Y/%m/%d/')),
                ('business_banner', models.ImageField(blank=True, null=True, upload_to='seller_banners/%Y/%m/%d/')),
                ('business_phone', models.CharField(max_length=17, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('business_email', models.EmailField(max_length=254)),
                ('business_website', models.URLField(blank=True, null=True)),
                ('tax_id', models.CharField(blank=True, max_length=50, null=True)),
                ('vat_number', models.CharField(blank=True, max_length=50, null=True)),
                ('business_registration_number', models.CharField(blank=True, max_length=100, null=True)),
                ('bank_account_details', models.JSONField(blank=True, null=True)),
                ('payout_method', models.CharField(choices=[('bank_transfer', 'Bank Transfer'), ('paypal', 'PayPal'), ('check', 'Check'), ('wire_transfer', 'Wire Transfer')], default='bank_transfer', max_length=20)),
                ('payout_threshold', models.DecimalField(decimal_places=2, default=100.0, max_digits=10)),
                ('verification_status', models.CharField(choices=[('pending', 'Pending'), ('under_review', 'Under Review'), ('verified', 'Verified'), ('rejected', 'Rejected'), ('suspended', 'Suspended')], default='pending', max_length=20)),
                ('verification_documents', models.JSONField(default=dict)),
                ('verified_at', models.DateTimeField(blank=True, null=True)),
                ('total_products', models.PositiveIntegerField(default=0)),
                ('total_orders', models.PositiveIntegerField(default=0)),
                ('total_sales', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('average_rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('total_reviews', models.PositiveIntegerField(default=0)),
                ('response_rate', models.DecimalField(decimal_places=2, default=0.0, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('response_time', models.DurationField(blank=True, null=True)),
                ('commission_rate', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('transaction_fee', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('subscription_plan', models.CharField(choices=[('basic', 'Basic'), ('professional', 'Professional'), ('enterprise', 'Enterprise')], default='basic', max_length=20)),
                ('subscription_expiry', models.DateTimeField(blank=True, null=True)),
                ('can_manage_products', models.BooleanField(default=True)),
                ('can_manage_inventory', models.BooleanField(default=True)),
                ('can_manage_pricing', models.BooleanField(default=True)),
                ('can_manage_promotions', models.BooleanField(default=False)),
                ('can_use_fulfillment_service', models.BooleanField(default=False)),
                ('can_access_analytics', models.BooleanField(default=False)),
                ('can_use_api', models.BooleanField(default=False)),
                ('store_policies', models.JSONField(default=dict)),
                ('shipping_options', models.JSONField(default=list)),
                ('return_policy', models.TextField(blank=True, null=True)),
                ('support_policy', models.TextField(blank=True, null=True)),
                ('meta_title', models.CharField(blank=True, max_length=60, null=True)),
                ('meta_description', models.TextField(blank=True, max_length=160, null=True)),
                ('store_keywords', models.TextField(blank=True, null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to='accounts.user')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to='accounts.user')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='seller_profile', to='accounts.user')),
                ('verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_sellers', to='accounts.user')),
            ],
            options={
                'verbose_name': 'Seller Profile',
                'verbose_name_plural': 'Seller Profiles',
                'permissions': [('can_approve_sellers', 'Can approve seller applications'), ('can_manage_seller_commissions', 'Can manage seller commissions'), ('can_view_seller_financials', 'Can view seller financial information')],
            },
        ),
        migrations.CreateModel(
            name='LoyaltyHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('points', models.IntegerField()),
                ('balance_after', models.IntegerField()),
                ('reason', models.CharField(max_length=255)),
                ('type', models.CharField(choices=[('earn', 'Earned'), ('spend', 'Spent')], max_length=10)),
                ('reference_type', models.CharField(blank=True, max_length=50, null=True)),
                ('reference_id', models.CharField(blank=True, max_length=100, null=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='loyalty_history', to='accounts.customerprofile')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to='accounts.user')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to='accounts.user')),
            ],
            options={
                'verbose_name_plural': 'Loyalty History',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='customerprofile',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to='accounts.user'),
        ),
        migrations.AddField(
            model_name='customerprofile',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to='accounts.user'),
        ),
        migrations.AddField(
            model_name='customerprofile',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='customer_profile', to='accounts.user'),
        ),
        migrations.CreateModel(
            name='AdminProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('role', models.CharField(choices=[('superuser', 'Superuser'), ('system_admin', 'System Administrator'), ('content_manager', 'Content Manager'), ('product_manager', 'Product Manager'), ('order_manager', 'Order Manager'), ('customer_support', 'Customer Support'), ('finance_manager', 'Finance Manager'), ('marketing_manager', 'Marketing Manager'), ('analytics', 'Analytics Specialist'), ('security', 'Security Specialist')], default='customer_support', max_length=20)),
                ('security_level', models.IntegerField(choices=[(1, 'Level 1 - Basic Access'), (2, 'Level 2 - Standard Access'), (3, 'Level 3 - Elevated Access'), (4, 'Level 4 - Administrative Access'), (5, 'Level 5 - Superuser Access')], default=1)),
                ('employee_id', models.CharField(blank=True, max_length=20, null=True, unique=True)),
                ('department', models.CharField(max_length=100)),
                ('job_title', models.CharField(max_length=100)),
                ('internal_phone', models.CharField(blank=True, max_length=10, null=True)),
                ('office_location', models.CharField(blank=True, max_length=100, null=True)),
                ('can_manage_users', models.BooleanField(default=False)),
                ('can_manage_sellers', models.BooleanField(default=False)),
                ('can_manage_products', models.BooleanField(default=False)),
                ('can_manage_orders', models.BooleanField(default=False)),
                ('can_manage_content', models.BooleanField(default=False)),
                ('can_manage_promotions', models.BooleanField(default=False)),
                ('can_view_reports', models.BooleanField(default=False)),
                ('can_manage_finances', models.BooleanField(default=False)),
                ('can_manage_settings', models.BooleanField(default=False)),
                ('can_access_audit_logs', models.BooleanField(default=False)),
                ('can_manage_roles', models.BooleanField(default=False)),
                ('access_restrictions', models.JSONField(default=dict)),
                ('allowed_ip_ranges', models.JSONField(default=list)),
                ('working_hours', models.JSONField(default=dict)),
                ('requires_2fa', models.BooleanField(default=True)),
                ('last_security_training', models.DateField(blank=True, null=True)),
                ('security_clearance', models.CharField(blank=True, max_length=50, null=True)),
                ('access_review_date', models.DateField(blank=True, null=True)),
                ('reports_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='subordinates', to='accounts.adminprofile')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to='accounts.user')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to='accounts.user')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='admin_profile', to='accounts.user')),
            ],
            options={
                'verbose_name': 'Admin Profile',
                'verbose_name_plural': 'Admin Profiles',
                'permissions': [('can_elevate_permissions', 'Can elevate permissions temporarily'), ('can_audit_admin_actions', 'Can audit other admin actions'), ('can_manage_system_settings', 'Can manage system settings')],
            },
        ),
        migrations.CreateModel(
            name='AdminAuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('action', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
                ('object_id', models.CharField(blank=True, max_length=100, null=True)),
                ('changes', models.JSONField(default=dict)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('admin', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='audit_actions', to='accounts.user')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to='accounts.user')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to='accounts.user')),
            ],
            options={
                'verbose_name': 'Admin Audit Log',
                'verbose_name_plural': 'Admin Audit Logs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address_type', models.CharField(choices=[('home', 'Home'), ('work', 'Work'), ('billing', 'Billing'), ('shipping', 'Shipping'), ('other', 'Other')], default='home', max_length=10)),
                ('is_default', models.BooleanField(default=False)),
                ('street_address', models.CharField(max_length=255)),
                ('apartment_suite', models.CharField(blank=True, max_length=50, null=True)),
                ('city', models.CharField(max_length=100)),
                ('state_province', models.CharField(max_length=100)),
                ('postal_code', models.CharField(max_length=20)),
                ('country', models.CharField(default='United States', max_length=100)),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to='accounts.user')),
            ],
            options={
                'verbose_name': 'Address',
                'verbose_name_plural': 'Addresses',
                'ordering': ['-is_default', 'address_type'],
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email', 'user_type'], name='accounts_us_email_1c44cf_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['created_at', 'account_status'], name='accounts_us_created_56b886_idx'),
        ),
        migrations.AddIndex(
            model_name='adminauditlog',
            index=models.Index(fields=['admin', 'created_at'], name='accounts_ad_admin_i_8633af_idx'),
        ),
        migrations.AddIndex(
            model_name='adminauditlog',
            index=models.Index(fields=['model', 'object_id'], name='accounts_ad_model_86af01_idx'),
        ),
    ]
